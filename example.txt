        // Exemple of how to setup route with Jolt 
        // get("/", () -> "Hello World!"); // This is the most basic route.
        // get("/hello", (context) -> "Hello" + context.query("name")); // This route has a query parameter.
        // get("/hello/{name}", (context) -> "Hello " + context.path("name")); // This route has a path parameter.
        // get("/template", (context) -> new Template("index.html", new Model().withAttribute("name", "World"))); // This route uses a template.
        // get("/json", (context) -> new Person("Bob Dole", 18)).asJson(); // This route returns a JSON response.

        public class MyApp extends JoltApplication {

                public static void main(String[] args) {
                        build().withPort(8080);
                        launch();
                }

                @Override
                public static void setup() {
                        get(...)
                        post(...)

                        ect.
                }
        }

Start implementing dependency injection, maybe not using @Bean tho.

Start implementing Security ! 

        - The security module for the V1 will be based off API-KEY authentification. 
        - We should have functions on the route to add security option to the route.
        - We will need to implement function to generate API-KEY and to check API-KEY.
        - We will need to implement function to add API-KEY to the route.
        - We will need to implement function to remove API-KEY from the route.
        - We will need to implement function to check if API-KEY is required for the route.
        - We will need to implement function to check if API-KEY is valid for the route.
        - And a bunch of other things for security, such as CORS, XSS, Headers , etc.
        - We will also need to implement a (or to extends the existing) Cookie logic so that our framework user can use cookies in their application. Ofc, by default when they set a route with an API_KEY, we should all manage that by default.
        - As the security is a big topic, we will need to implement a lot of things, so we will need to create a new module for security, and we will need to implement all the security features in this module.
        - As the framework is first designed to make REST API, we won't be implementing CSFR, as it is not directly needed for REST API.
        - We also want to keep it open for modification, because one of the first other thing I want to implement in V2 is Role-based access control, so we will need to keep it open for modification.

        An example of a fully secured configuration App : 

        public class MyApp extends JoltApplication {

                public static void main(String[] args) {
                        launch(args);
                }

                @Override
                protected void setup() {
                        configureServer(); // Configure the server

                        get("/home", () -> "Hello World");
                        get("/secret", () -> "This is a secret page", SecurityOption.KEY(... We should define a way to auth the key in here. )); // In V2, we will add SecurityOption.ROLE(Role.ADMIN)
                }

                @Override
                private void configureServer() {
                        build()
                                .withPort(8080)
                                .withSecurity() // And a bunch of other configuration, just like Spring-Boot, as we don't want to 'take' security issue lightly.
                                        .withCORS()
                                                .allowedCredentials()
                                                .allowedHeaders("Authorization", "Cache-Control", "Content-Type")
                                                .allowedMethods("GET", "POST", "PUT", "DELETE")
                                                .allowedOrigins("http://localhost:8080")
                                        .withHeaders()
                                                .withXssProtection() // Maybe we should be able to customize XSS protection.
                                                .frameOption(false)
                                                .httpStrictTransportSecurity(true)
                                                .referrerPolicy(ReferrerPolicy.SAME_ORIGIN)
                                                .httpsOnly() // Maybe we should be able to customize HTTPS only. By default it's false so http works.
                                        .secureRequests(secure -> secure
                                                .route("/home").permitAll() // We have 4 options : permitAll(), secured(), permit(Method.GET, Method.POST), denyAll() 
                                                .route("/secret").secured() // So we know it's secured, and in the route definition, we will pass the SecurityOption.
                                                .anyRoute().denyAll())
                                        .keyGeneration(HashAlgorithm.SHA256) // How the API_KEY will generate keys. We have 2 options : SHA256, SHA512 
                }
        }



# =========================
#  Basic server properties
# =========================

# The port on which Tomcat will listen (HTTP).
server.port=80

# Temp directory for Tomcat's files (logs, etc.).
server.tempDir=tmp/tomcat

# Whether to enable SSL (HTTPS).
server.ssl.enabled=false

# If SSL is enabled, the port to use.
server.ssl.port=8443

# Path to the keystore file for SSL, if enabled.
server.ssl.keyStore=path/to/keystore.jks

# Password for the keystore.
server.ssl.keyStorePassword=changeit

# Key alias in the keystore to use.
server.ssl.keyAlias=myalias

# Minimum worker threads in Tomcat.
server.threads.min=10

# Maximum worker threads in Tomcat.
server.threads.max=200

# Worker thread idle timeout (ms).
server.threads.timeout=60000

# Whether to run Tomcat as a daemon (non-blocking) in the background.
server.daemon=false

# Application name (used for logging, etc.).
server.appName=MyJoltApp


# =========================
#  Multipart file support
# =========================

# Maximum size (in bytes) of a single uploaded file (default: 5 MB).
server.multipart.maxFileSize=10485760

# Maximum size (in bytes) of the entire multipart request (default: 20 MB).
server.multipart.maxRequestSize=20971520

# File size threshold (in bytes) after which uploads are written to disk (default: 1 MB).
server.multipart.fileSizeThreshold=1048576


# =========================
#  Database properties
# =========================

# JDBC URL for your database.
db.url=jdbc:mysql://localhost:3306/mydb

# Database username.
db.username=root

# Database password.
db.password=secret

# JDBC driver class name.
db.driver=com.mysql.cj.jdbc.Driver


@JoltBean
public class MyFilter implement JoltFilter  {


        public void doFilter(JoltHttpContext context, JoltFilterChain chain) throws IOException, ServletException {
                // Logic... 

                chain.doFilter(this); // The chains continue to the next chains in the filter chains, can also do chain.stopFilter(this) to stop the filter chains after this filter has run. or chain.stopFilter() to stop the chain before this filter runs.
        }
}


Jakarta EE provides a strong foundation for web application development, but not everything you mentioned is "baked in" by default. Here’s a breakdown:

Session Management

What’s Built-In: The Servlet specification (a core part of Jakarta EE) includes the HttpSession API, which supports session management out of the box.

Implication: Developers can rely on the container to manage sessions, including session timeout, storage, and lifecycle events.

Authentication and Authorization

Built-In Mechanisms: Jakarta EE supports container-managed security. You can define security constraints in the deployment descriptor (or via annotations), and the container supports standard authentication methods like FORM, BASIC, DIGEST, and CLIENT-CERT. The newer Jakarta Security (formerly Java EE Security API) provides additional annotations (like @RolesAllowed, @PermitAll, etc.) to help with role-based authorization.

Implication: While these mechanisms ease authentication and authorization at the container level, customization (or the use of additional mechanisms like JWTs) might be needed for more advanced use cases.

CORS (Cross-Origin Resource Sharing)

Default State: Jakarta EE does not enforce or automatically handle CORS policies out of the box.

Typical Approach: Developers usually implement a servlet filter (or use available libraries) to add the necessary Access-Control-Allow-* headers.

CSRF (Cross-Site Request Forgery) Protection

Default State: There is no standardized, automatic CSRF protection mechanism provided by the Jakarta EE specifications.

Typical Approach: Developers generally implement CSRF protection by adding tokens to forms and verifying them on submission, often through a servlet filter or by leveraging third-party security frameworks.

XSS (Cross-Site Scripting) and Secure Headers

Default State: While Jakarta EE and related frameworks (such as JSF) may help with encoding outputs to mitigate XSS in views, the platform does not automatically add HTTP security headers like Content-Security-Policy, X-Content-Type-Options, or X-XSS-Protection.

Typical Approach: These headers need to be configured manually—either at the application server level, via a reverse proxy (e.g., Nginx, Apache HTTP Server), or through custom filters in your application.

Summing It Up
Yes: Jakarta EE inherently provides session management and container-managed authentication/authorization as part of its core functionality.

No: It does not provide built-in or automatic solutions for CORS, CSRF protection, or the enforcement of secure HTTP headers for XSS mitigation.

Diving Deeper
This design allows Jakarta EE to remain flexible. Developers can implement security measures tailored to their application’s needs rather than being locked into a one-size-fits-all approach. For instance:

CORS Filters: You can create a simple servlet filter to intercept requests and add the required CORS headers. This filter can be as customizable as needed, allowing different rules for different endpoints.

CSRF Tokens: Implementing CSRF protection might involve generating a unique token per session, embedding it in forms, and validating it on POST/PUT/DELETE requests. Some frameworks built on top of Jakarta EE even offer support to simplify this process.

Secure Headers: Securing your application often means configuring your web server or application server to include headers that instruct browsers to handle content in a secure way. For example, setting up a Content Security Policy (CSP) can mitigate many client-side attacks.

Final Thoughts
While Jakarta EE gives you the building blocks for web development, best practices—especially around security—often require extra layers of configuration and sometimes third-party integrations. If your application demands advanced security measures, you might look into additional frameworks like Spring Security or libraries specialized in security headers and CSRF protection.

Would you like some code snippets or examples on how to implement a CORS filter or CSRF token mechanism in Jakarta EE?
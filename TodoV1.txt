Package to easily integrate docker (and potentially later docker-compose to have a more complex setup).

JWT built-in support for authentication and authorization. With user provided secret key in the .env and pepper.

String token = JwtToken.createJwe(userID, claims);
String token = JwtToken.createJws(userID, claims);
boolean isValid = JwtToken.validateJws(token);
String userID = JwtToken.getOwner(token);

in application.properties file: 

server.jwt.secret_key={SECRET_KEY}
server.jwt.pepper={PEPPER}

V-3
Add CSRF management and protection throughout the framework.
Add Session management to the framework and make it secure and easy to use, built on top of Jakarta HttpSession
Add Simple authentification and authorization system, built with both Session and JWT token.
Add an email service to the framework, which will allow testing and sending emails.

V-4
Add a BaseController class that will be used to create controllers, and will provide Router-like functionality.
Add annotation such as: @Root("") which can be applied to the controller class to specify the root path of the controller.
Add annotation such as: @Get(), @Post(), @Put(), @Delete(), @Mapping(HttpMethod method, String path) to specify the HTTP method of the controller method.

Here is an example of the futur version for security route configuration and CSRF : 

.withCSRF()
    .enable() // .disable();
    .addIgnoreUrlPatterns("/login", "/register", "/forgot-password", "/reset-password");
    .withHttpOnlyFalse(); // .withHttpOnly(true);
    .withHandler(new CustomHandler()) // A way to handle the CSRF token.

.withRoutes()
    .route("/**").permitAll() // denyAll()
    .route("/admin").authenticated(Auth.Session) // .authenticated(Auth.JWT), .authenticated(new CustomAuth());
    .route("/threads").permit(HttpMethod.GET, HttpMethod.PATCH).authenticated(Auth.Session)
    .anyRoute().denyAll();


# Which language to use as default
server.defaultLanguage=fr
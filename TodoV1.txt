Package to easily integrate docker (and potentially later docker-compose to have a more complex setup).

JWT built-in support for authentication and authorization. With user provided secret key in the .env and pepper.

String token = JwtToken.createJwe(userID, claims);
String token = JwtToken.createJws(userID, claims);
boolean isValid = JwtToken.validateJws(token);
String userID = JwtToken.getOwner(token);

in application.properties file: 

server.jwt.secret_key={SECRET_KEY}
server.jwt.pepper={PEPPER}

V-2
- Fix @Check annotation not working when we throw an exception, which should show the condition as hint to the user, but it works with @CheckEnum ???? IDK
- Add support to inject variables in the database.
- Add support to add trigger function to the database. 
- Add support to add custom procedure / function to the database.
- Add support to add views to the database.

V-3
Improve CID Container to make it more flexible and allow injection in none-bean object classes.
Implement freemarker template to generate HTML pages and make it easy to integrate within the framework. 
Improve configurability of the framework.
Add CSRF management and protection throughout the framework.
Add Session management to the framework and make it secure and easy to use, built on top of Jakarta HttpSession
Add Simple authentification and authorization system, built with both Session and JWT token.
Add an email service to the framework, which will allow testing and sending emails.
Add auto-scanning of packages for the CID Container, to make it easy to add new components without having to manually add them to the CID Container.

V-4
Add a BaseController class that will be used to create controllers, and will provide Router-like functionality.
Add annotation such as: @Root("") which can be applied to the controller class to specify the root path of the controller.
Add annotation such as: @Get(), @Post(), @Put(), @Delete(), @Mapping(HttpMethod method, String path) to specify the HTTP method of the controller method.

Here is an example of the futur version for security route configuration and CSRF : 

.withCSRF()
    .enable() // .disable();
    .addIgnoreUrlPatterns("/login", "/register", "/forgot-password", "/reset-password");
    .withHttpOnlyFalse(); // .withHttpOnly(true);
    .withHandler(new CustomHandler()) // A way to handle the CSRF token.

.withRoutes()
    .route("/**").permitAll() // denyAll()
    .route("/admin").authenticated(Auth.Session) // .authenticated(Auth.JWT), .authenticated(new CustomAuth());
    .route("/threads").permit(HttpMethod.GET, HttpMethod.PATCH).authenticated(Auth.Session)
    .anyRoute().denyAll();



@NoArgsConstructor
@Getter 
@Setter
@Table(table = "users", unique = {"name"})
public class User {

    @Id(generationType = GenerationType.IDENTITY)
    private Integer id;

    @Column(value = "name", length = 255, nullable = false)
    private String name;

    @JoinColumn("user_product_id", nullable = false)
    @OneToMany(mappedBy = "user", cascade = CascadeType.ALL, FetchType.LAZY, orphanRemoval = true) // 1 user can have many products
    private List<Product> products;
}

@NoArgsConstructor
@Table(table = "product", unique = { "name" }, indexes = { "name" })
@Getter
@Setter
public class Product {
    @Id(generationType = GenerationType.IDENTITY)
    private Integer id;

    @Column(value = "name", length = 255, nullable = false)
    private String name;

    @Column(value = "description", nullable = true)
    private String description;

    @Column(value = "price", nullable = false)
    private Double price;

    @CheckEnum(values = { "AVAILABLE", "UNAVAILABLE" })
    @Column(value = "status", nullable = true)
    private String status;

    @Column(value = "user_id")
    private User user;
}